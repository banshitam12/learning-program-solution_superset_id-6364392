using System;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using System.Linq;

class Program
{
    static async Task Main(string[] args)
    {
        Console.OutputEncoding = System.Text.Encoding.UTF8;
        using var context = new AppDbContext();

        // 1. Filter products with Price > 1000 and sort by Price descending
        var filtered = await context.Products
            .Where(p => p.Price > 1000)
            .OrderByDescending(p => p.Price)
            .ToListAsync();

        Console.WriteLine("Filtered and Sorted Products:");
        foreach (var p in filtered)
            Console.WriteLine($"{p.Name} - ₹{p.Price}");

        // 2. Project products into DTOs (Name and Price only)
        var productDTOs = await context.Products
            .Select(p => new { p.Name, p.Price })
            .ToListAsync();

        Console.WriteLine("\nProduct DTOs:");
        foreach (var dto in productDTOs)
            Console.WriteLine($"{dto.Name} - ₹{dto.Price}");

        // 3. Filter by category and sort by price (example: Electronics)
        var electronicsProducts = await context.Products
            .Include(p => p.Category)
            .Where(p => p.Category.Name == "Electronics")
            .OrderBy(p => p.Price)
            .ToListAsync();

        Console.WriteLine("\nElectronics Products (sorted by price):");
        foreach (var p in electronicsProducts)
            Console.WriteLine($"{p.Name} - ₹{p.Price}");

        // 4. Paging example: get first 1 product(s) over 1000, sorted by price
        int pageNumber = 1;
        int pageSize = 1;
        var paged = await context.Products
            .Where(p => p.Price > 1000)
            .OrderBy(p => p.Price)
            .Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();

        Console.WriteLine($"\nPaged Products (Page {pageNumber}, Size {pageSize}):");
        foreach (var p in paged)
            Console.WriteLine($"{p.Name} - ₹{p.Price}");
    }
}
